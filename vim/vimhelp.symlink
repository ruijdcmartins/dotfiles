*Vim core*

Vim commands for customizing

  Vim documentation shot cuts, use tab wille typing 
   :help CTRL

  Vim default mappings
   :help index

  List of all currently defined mappings
   :map
   :map-alt-keys
   :map <C-p>

  Check the scriptnames that were loaded
   :scriptnames

  Check the resistors content
   :reg
   :reg "

  Check status of current variable of vim
   :set expandtab?

  Buffers, Tabs and Windows defenition:
    A buffer is the in-memory text of a file.
    A window is a viewport on a buffer.
    A tab page is a collection of windows.
   == Usage of tabs ==
   :tabe[dit] filename	Open filename in a new tab
   :tabs Show a list of tabs
   <C-W> T	Move current split window into its own tab
   :q	Close window, closing tab if it contains a single window
   :tabc[lose]	Close the current tab page and all its windows
   :tabo[nly]	Close all tabs apart from the current one
   gt	Move to next tab
   gT	Move to previous tab
   #gt Move to tab number #
   == Usage of windows ==
   <C-W>=  resize windows equally 

Vim commands for text editing

  Check this manuals/sheat sheet:
  http://vimdoc.sourceforge.net/vimum.html
  http://bullium.com/support/vim.html
  http://www.keyxl.com/aaa8263/290/VIM-keyboard-shortcuts.htm

  Just a couple of vim commands to don't forget
  vim registers http://www.brianstorti.com/vim-registers/
  https://sanctum.geek.nz/arabesque/advanced-vim-registers/

  *       => move to next matching word under the cursor
  #       => move to previous matching word under the cursor

  Markers
   m[a-z] => create a marker named a to z on current position
   m[A-Z] => cerate a marker named A to Z on current position across files
   '[a-z] => go to first char of the line marked from a to z
   `[a-z] => go to the exact char marked
   ''     => go to the last jump

  <C-o>   => move back cursor/file
  <C-i>   => move forward cursor/file
  <C-p,n> => show completion options
  <C-a>   => increment number or alphabetic character at or after the cursor
  <C-x>   => decrement number or alphabetic character at or after the cursor
  <C-x>   => completion options in insert mode

  Move to matching braces
   %

  In visual mode select your text an sort it on with command mode 
   :'<,'>sort

  In insert mode paste text from any register
  the default register is ""
   <C-r> [your chosen register]
   <C-r> "

  Access the expression resistor in insert mode and do some math
   <C-r> =

  Repeat the last macro
   @@

  Preform action on multiple files that are in buffers windows and tabs
   :bufdo %s/pattern/replace/ge | update
   :bufdo execute "normal! @a" | update
   :windo
   :tabdo

  Argument list, this can be used to do a substitution on multiple files
   :args `find . -name '*.txt'`
   :args
   :argdo :%s/bananas/morangos/g | w

  Foldind commands
   zc individual close
   zo individual open
   za individual toggle
   zm folds all ; more folding
   zr unfolds all ; reduce fold 
   zf manual fold

  Use Very Magic for the real regex
  http://vimregex.com/
   :help magic
   /\v
   :s/\v(CapturingGroup1|orSomethingElse)moreRegex stuf/NewStuf \1/

  Afther a search you can do a subtitution just by doing
   :s//NewStuf/

  Auto Complete
   1. <C-X><C-L>    => Whole lines
   2. <C-X><C-N>    => keywords in the current file
   3. <C-X><C-K>    => keywords in 'dictionary'
   4. <C-X><C-T>    => keywords in 'thesaurus', thesaurus-style
   5. <C-X><C-I>    => keywords in the current and included files
   6. <C-X><C-]>    => tags
   7. <C-X><C-F>    => file names
   8. <C-X><C-D>    => definitions or macros
   9. <C-X><C-V>    => Vim command-line
   10. <C-X><C-U>   => User defined completion
   11. <C-X><C-O>   => omni completion
   12. <C-X>_s      => Spelling suggestions
   13. <C-N>        => keywords in 'complete'

*Plugins*
  
  vim-surrond
   normal mode options
    cs'"            => change surround ' to "
    ds"             => delete surround "
    ysiw[           => add surround [] inner word
    dst             => delete surround tag <a>HTML STILE</a>
    cst<b>          => change surround tag to <b></b>
   visual mode options
    S'                => add surround '

  tabular
   Basic/Auto
    :Tabularize /,                 => Aline the next lines concerning ,
    :Tab /,                        => Just the same
   Usage of lN cN rN for right center and left aligned, and N for the number of spaces
  tabular will cycle the lN's for each line 
    :Tabularize / => /l4l0         => this was the one used here, left aligned and 4 sapces ...
   Advance regex
    :Tabularize /regex/l1c2r3      => atom is defind in the regex them that is the match
    :Tabularize /\v[.=]/r0c0l1c1l0

  vim-fugitive
   :Git add % | :Gwrite      => git add current file
   :Git add .                => add all the files
   :Gcommit .
   :Gstatus                  => - to add selected file to commit list
                             => p show selected file patchs changes | git add --patch
                             => C to commit
    .....

  

" ========================================
" ============Plug config=================
" ========================================
source ~/.vimPlugrc
" ========================================
" ============Plug config end=============
" ========================================

" =============My vim options===========
set nocompatible                   " be iMproved, required
filetype indent plugin on
syntax on
set ai                              " auto indent
set hlsearch                        " high light search
set incsearch                       " search as characters are entered
set number                          " number the lines
set t_Co=256                        " set colour to 256
set wildmenu                        " show matching possibilities in : prompt

"Tabs...
set smarttab                        " Be smart when using tabs
set expandtab                       " Soft tab mode 
set tabstop=4                       " tap size
set shiftwidth=4                    " 1 tab == 4 spaces
set softtabstop=4                   " makes the spaces feel like real tabs

"No soft tabs:
" set softtabstop=0
" set noexpandtab

set scrolloff=5                     " when scrolling all ways show 5 lines
set cursorline                      " enable the horizontal line
" set cursorcolumn                  " enable the vertical line
set hidden                          " change buffer without saving
set wrap                            " this enables visual  wrapping
set textwidth=0 wrapmargin=0        " this turns off physical line wrapping
set autoread                        " detect when a file is changed
set timeoutlen=1000 ttimeoutlen=10  " time delay for key combinations and changing modes
set esckeys                         " deables all <esc> conbinations

set splitbelow
set splitright

"Very magic
"nnoremap / /\v
"vnoremap / /\v
"noremap / /\v
"cnoremap %s/ %s/\v

" ======= Colors and Thems ==========
"colorscheme hybrid 
"colorscheme solarized
colorscheme Monokai
if g:colors_name == 'Monokai'
    "The NonText highlighting will be used for eol, extends and precedes.
    "SpecialKey for nbsp, space, tab and trail. hl-NonText hl-SpecialKey
    highlight SpecialKey ctermfg=59 ctermbg=235 cterm=NONE guifg=#49483e guibg=#3c3d37 gui=NONE
    ":highlight NonText ctermfg=59 ctermbg=236 cterm=NONE guifg=#49483e guibg=#31322c gui=NONE
    ":highlight SpecialKey ctermfg=59 ctermbg=237 cterm=NONE guifg=#49483e guibg=#3c3d37 gui=NONE
    ":highlight Cursor ctermfg=235 ctermbg=231 cterm=NONE guifg=#272822 guibg=#f8f8f0 gui=NONE
    ":highlight Visual ctermfg=NONE ctermbg=59 cterm=NONE guifg=NONE guibg=#49483e gui=NONE
    ":highlight CursorLine ctermfg=NONE ctermbg=237 cterm=NONE guifg=NONE guibg=#3c3d37 gui=NONE
    ":highlight CursorColumn ctermfg=NONE ctermbg=237 cterm=NONE guifg=NONE guibg=#3c3d37 gui=NONE
endif
" ==========toggle invisible characters==========
" § ¦ ┆  │ • ¶ ÷ → ← ▶ ◀ ❮ ❯ ⟨ ⟩ ★ ♦ ◥  ¬ ↲ ↪ ↳ ≈ ¿ ◊ ˚ º ª ˆ ^ ˆ › ␣ · ⋅ ” ˝ Ω » © √ ∫ ¬ µ Å ß ∆ ƒ ˙ ˇ ¯ ‚ ’ ˛ Œ Æ ® ™ ¥ ‡ ˚ Ø ∏
function! MyIndetation()
    set list listchars=tab:┆⋅,eol:↲,trail:·,extends:⟩,precedes:⟨
endfunction
call MyIndetation()
set showbreak=↪\ 
map <leader>i :call  MyIndetation()<CR>
map <leader>I :set nolist<CR>
" ==============My Mappings==============
" To check if a maping exist try e.g. :verbose map \r

let mapleader = '\'
map <leader>r :source ~/.vimrc<CR>
map <leader>w <C-w><C-w>
map <leader>pm :set paste<CR>
map <leader>Pm :set nopaste<CR>
"paste to next line
map <leader>po :pu
"paste to previus line
map <leader>pO :pu!
"list all mapings
noremap <leader>? :map<CR>
noremap <leader>p "+p
noremap <leader>P "+P
noremap <leader>y "+y
noremap <leader>Y "+Y
map <leader>tt :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>
map <leader>nt :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
" turn off search highligh
nnoremap <leader><space> :nohlsearch<CR>
map <leader>s :echo '<leader>se En; <leader>sp Pt; in vm use z=; next ]s; prev [s; add zg; addS zG; wrong zw; wrongS sW;'<CR>
" <C-x><C-k> for options ; in v mode z= for sugestions
map <leader>se :set spell spelllang=en_ca<CR>
map <leader>sp :set spell spelllang=pt<CR>
map <leader>S :set nospell<CR>
map <leader>d "_d |"the black hole register
map <leader>D "_D |"the black hole register
" desable shift k 
" map <S-k> <Nop>
" desable shift j and pass beavior to <C-j>
" map <S-j> <Nop>
" map <C-j> :join<CR>
" map <C-J> :join!<CR>
" scroll the viewport faster
nnoremap <C-k> 3k
nnoremap <C-j> 3j
inoremap <C-k> <Up>
inoremap <C-j> <Down>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
inoremap ‘ <BS>
inoremap ˇ <Del>
nmap <leader><leader> :w<cr>    " shortcut to save
" map <leader>ig :set list listchars=tab:\→\ ,eol:¬,trail:⋅,extends:❯,precedes:❮<CR>

" ========== move lines up and down==========
" " <alt-k> ¯ ==>
" nmap ¯ :m+<CR>
" " <alt-j> „ ==>
" nmap „ :m-2<CR>
" vmap ¯ :m'>+<CR>`<my`>mzgv`yo`z
" vmap „ :m'<-2<CR>`>my`<mzgv`yo`z
nnoremap ¯ :m .+1<CR>==
nnoremap „ :m .-2<CR>==
inoremap ¯ <Esc>:m .+1<CR>==gi
inoremap „ <Esc>:m .-2<CR>==gi
vnoremap ¯ :m '>+1<CR>gv=gv
vnoremap „ :m '<-2<CR>gv=gv

" ==========Folding setup==========
function! FoldindToggle()
    if &foldenable ==# "nofoldenable"
        set fen
        set foldcolumn=4 
        set fdm=indent
    else
        set nofen 
        set fdc=0 
        set fdm=indent
    endif
endfunction
map <leader>f :call FoldindToggle()<CR>
"zc individual close
"zo individual open
"za individual toggle
"zm folds all ; more folding
"zr unfolds all ; reduce fold 
"zf manual fold
" ========= Relative Numbering =========
function! NumberToggle()
    if(&relativenumber == 1)
        set norelativenumber
    else
        set number
        set relativenumber
    endif
endfunc
" call NumberToggle()
call NumberToggle()
nnoremap <leader>nr :call NumberToggle()<CR>
"============ Backspace ============
set backspace=2 " make backspace work like most other apps
set backspace=indent,eol,start

" ========== disable auto comment ==========
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
set formatoptions-=cro

" ========== Crontab ==========
"   compatibility workaround for using Vim 
autocmd filetype crontab setlocal nobackup nowritebackup

" ========To be improved============
" ========== Test Area ==========
vmap <leader>t :Tab /
vmap <leader>T :Tab /\zs
": Tab /'char to alin' 
":'<,'>Tab /:\zs

function! MyTab(texto)
    echo a:texto
endfunction
"map <leader>T=MyTab()<CR>

function! MyTab1()
    echo "texto"
endfunction
map <leader>-:call  MyTab1()

" ==========Mac test==========
" function! Mac_teste()
"     if has("mac") || has("macunix")
"     echo "mac"
"     " nmap <D-j> <M-j>
"     " nmap <D-k> <M-k>
"     " vmap <D-j> <M-j>
"     " vmap <D-k> <M-k>
"     endif
" endfunction

" if has("unix")
"     let s:uname = system("uname")
"     if s:uname == "Darwin\n"
"         echo "mac from if"
"     endif
" endif

" " ====== Tabular func ===========
" inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
" 
" function! s:align()
"   let p = '^\s*|\s.*\s|\s*$'
"   if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
"     let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
"     let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
"     Tabularize/|/l1
"     normal! 0
"     call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
"   endif
" endfunction

" ========================================
" ============Plugins config ==============
" ========================================
source ~/.vimPluginsrc
" ========================================
" ======== Plugins config end ============
" ========================================
" 

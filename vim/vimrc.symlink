
"============Plug config=================
"========================================

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

"call plug#begin('~/.vim/plugged')
call plug#begin('~/.vim/bundle')
Plug 'terryma/vim-multiple-cursors' 										"Ctrl-n, Ctrl-p, Ctrl-x, MultipleCursorsFind
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'Valloric/YouCompleteMe'  , { 'do': './install.py --clang-completer' }
Plug 'kien/ctrlp.vim' 														"fuzzy find files
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } 						"file drawer, open with :NERDTreeToggle
Plug 'benmills/vimux'
Plug 'godlygeek/tabular'	 												|": Tab /'char to alin' |":'<,'>Tab /:\zs
Plug 'ervandew/supertab'
" ======== Color Plugs ===============
Plug 'w0ng/vim-hybrid'
Plug 'altercation/vim-colors-solarized'
Plug 'sickill/vim-monokai'
"======= SnipMate (grabas) ===========
"Plug 'MarcWeber/vim-addon-mw-utils'
"Plug 'tomtom/tlib_vim'
"Plug 'garbas/vim-snipmate'
" UtilSnips
Plug 'SirVer/ultisnips'
" Optional
Plug 'honza/vim-snippets'
"========================================

call plug#end()

"========================================
"============ Plug END ==================
"========================================

"=============My vim options===========
set nocompatible          " be iMproved, required
filetype indent plugin on
syntax on
set ai                    " auto indent
set hlsearch              " higth light search
set incsearch             " search as characters are entered
set nu                    " number the lines
set t_Co=256              " set colour to 256
set wildmenu              " show machin possibilitys in : prompt
set ts=4                  " tap size
set scrolloff=5           " when scrolling allways show 5 lines
set cursorline            " highlight current line
set hidden                " cahnge buffer without saving
"Very magic
"noremap / /\v					
"cnoremap %s/ %s/\v 				
"============= AirLine =============
set laststatus=2 "to vim airline apear
let g:airline#extensions#tabline#enabled = 1 	 "enable the list of buffers
let g:airline#extensions#tabline#fnamemod = ':t' "show just the filename
"AirlineTheme murmur

"======= Colors and Thems ==========
"--hybrid--
"let g:hybrid_custom_term_colors = 1
"let g:hybrid_reduced_contrast = 1
"colorscheme hybrid 
"--end--
"-------------
"--solarized--
"set background=dark
"let g:solarized_visibility = "high"
"let g:solarized_contrast = "high"
"let g:solarized_termcolors = 256
"colorscheme solarized
"--end--
"-------------
"--monokai--
colorscheme monokai
"--end--

"==========Additional spec=============
"vim-cpp-enhanced-highlight
let c_no_curly_error=1
let g:cpp_class_scope_highlight = 1
let g:cpp_experimental_template_highlight = 1

"disable auto comment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
set formatoptions-=cro
"==

"NERDTree automatically
autocmd StdinReadPre * let s:std_in=5
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif   " incompatible YCM
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"YCM
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'                      
let g:ycm_confirm_extra_conf = 0

"let g:ycm_key_list_select_completion = [] "YCM snippet compatibility, disable tab
"Make YCM corpatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-k>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-j>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-k>'

"Crontab compatibility workaround for using vim 
autocmd filetype crontab setlocal nobackup nowritebackup

"==========My Mapings==============
map <C-e> :NERDTreeToggle<CR>
map <leader>rr :source ~/.vimrc<CR>          " default leader is \
map <leader>n :bnext<CR>
map <leader>p :set paste<CR>
map <leader>P :set nopaste<CR>
nnoremap <leader><space> :nohlsearch<CR>     " turn off search highlight
map <leader>s :set spell spelllang=en_ca<CR> " <C-x><C-k> for options
map <leader>S :set nospell<CR>
"======= snipets key bindind ========
"let g:snips_trigger_key = '<c-j>'
"let g:snips_trigger_key_backwards = '<c-k>'
"imap <C-J> <esc>a<Plug>snipMateNextOrTrigger
"smap <C-J> <Plug>snipMateNextOrTrigger
" Set ultisnips triggers
let g:UltiSnipsExpandTrigger="<tab>"                                            
let g:UltiSnipsJumpForwardTrigger="<tab>"                                       
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"    

"========To be improved============
" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
"nmap <M-j> mz:m+<cr>`z
"nmap <M-k> mz:m-2<cr>`z
"vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
"vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
"
"if has("mac") || has("macunix")
"    nmap <D-j> <M-j>
"    nmap <D-k> <M-k>
"    vmap <D-j> <M-j>
"    vmap <D-k> <M-k>
"endif
"
"========== Test Area ==========
vmap <leader>t :Tab /
vmap <leader>T :Tab /\zs
": Tab /'char to alin' 
":'<,'>Tab /:\zs

function! MyTab(texto)
		echo a:texto
endfunction
"map <leader>T=MyTab()<CR>
map <leader>+:call  MyTab()<CR>


"====== Tabular func ===========
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction
"=================================


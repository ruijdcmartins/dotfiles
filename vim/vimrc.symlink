" ========================================
" ============Plug config=================
" ========================================
au BufReadPost *.vimPlugrc set syntax=vim
source ~/.vimPlugrc
" ========================================
" ============Plug config end=============
" ========================================

" =============My vim options===========

" going hard on vim
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>

set nocompatible                   " be iMproved, required
filetype indent plugin on
syntax on
set ai                              " auto indent
set hlsearch                        " high light search
set incsearch                       " search as characters are entered
set number                          " number the lines
set t_Co=256                        " set colour to 256
set wildmenu                        " show matching possibilities in : prompt
set path+=**                        " subfolders search for files and completion 
set complete+=i,kspell              " add options to vim completion
"Tabs...
" Soft tabs
set smarttab                        " Be smart when using tabs
set expandtab                       " Soft tab mode 
"No soft tabs:
" set softtabstop=0
" set noexpandtab

" set tabstop=2                       " tap size
" set shiftwidth=2                    " 1 tab == 2 spaces
" set softtabstop=2                   " makes the spaces feel like real tabs
function! MyTabSize(size)
  execute "set tabstop=".a:size
  execute "set shiftwidth=".a:size
  execute "set softtabstop=".a:size
endfunction
command! -nargs=1 SetTabSize call MyTabSize(<f-args>)
SetTabSize 2
set scrolloff=5                     " when scrolling all ways show 5 lines
set cursorline                      " enable the horizontal line
" set cursorcolumn                  " enable the vertical line
set hidden                          " change buffer without saving
set wrap                            " this enables visual  wrapping
set textwidth=0 wrapmargin=0        " this turns off physical line wrapping
set autoread                        " detect when a file is changed
set timeoutlen=1000 ttimeoutlen=10  " time delay for key combinations and changing modes
"set esckeys                         " deables all <esc> conbinations
set splitbelow
set splitright

" ======= Colors and Thems ==========
"colorscheme hybrid 
"colorscheme solarized
colorscheme Monokai
if g:colors_name == 'Monokai'
  "The NonText highlighting will be used for eol, extends and precedes.
  "SpecialKey for nbsp, space, tab and trail. hl-NonText hl-SpecialKey
  highlight SpecialKey ctermfg=59 ctermbg=235 cterm=NONE guifg=#49483e guibg=#3c3d37 gui=NONE
  ":highlight NonText ctermfg=59 ctermbg=236 cterm=NONE guifg=#49483e guibg=#31322c gui=NONE
  ":highlight SpecialKey ctermfg=59 ctermbg=237 cterm=NONE guifg=#49483e guibg=#3c3d37 gui=NONE
  ":highlight Cursor ctermfg=235 ctermbg=231 cterm=NONE guifg=#272822 guibg=#f8f8f0 gui=NONE
  ":highlight Visual ctermfg=NONE ctermbg=59 cterm=NONE guifg=NONE guibg=#49483e gui=NONE
  ":highlight CursorLine ctermfg=NONE ctermbg=237 cterm=NONE guifg=NONE guibg=#3c3d37 gui=NONE
  ":highlight CursorColumn ctermfg=NONE ctermbg=237 cterm=NONE guifg=NONE guibg=#3c3d37 gui=NONE
endif

" ========== File tree explorer ==========
map <C-e> :Lexplore<CR>
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25
" absolute width of netrw window
let g:netrw_winsize = -28
" do not display info on the top of window
let g:netrw_banner = 0
" sort is affecting only: directories on the top, files below
let g:netrw_sort_sequence = '[\/]$,*'
" ?? A testar ??
com!  -nargs=* -bar -bang -complete=dir  Lexplore  call netrw#Lexplore(<q-args>, <bang>0)
fun! Lexplore(dir, right)
  if exists("t:netrw_lexbufnr")
  " close down netrw explorer window
  let lexwinnr = bufwinnr(t:netrw_lexbufnr)
  if lexwinnr != -1
    let curwin = winnr()
    exe lexwinnr."wincmd w"
    close
    exe curwin."wincmd w"
  endif
  unlet t:netrw_lexbufnr
  else
    " open netrw explorer window in the dir of current file
    " (even on remote files)
    let path = substitute(exists("b:netrw_curdir")? b:netrw_curdir : expand("%:p"), '^\(.*[/\\]\)[^/\\]*$','\1','e')
    exe (a:right? "botright" : "topleft")." vertical ".((g:netrw_winsize > 0)? (g:netrw_winsize*winwidth(0))/100 : -g:netrw_winsize) . " new"
    if a:dir != ""
      exe "Explore ".a:dir
    else
      exe "Explore ".path
    endif
    setlocal winfixwidth
    let t:netrw_lexbufnr = bufnr("%")
  endif
endfun
" augroup ProjectDrawer
  " autocmd!
  " autocmd VimEnter * :Vexplore
" augroup END

" ==========toggle invisible characters==========
" § ¦ ┆  │ • ¶ ÷ → ← ▶ ◀ ❮ ❯ ⟨ ⟩ ★ ♦ ◥  ¬ ↲ ↪ ↳ ≈ ¿ ◊ ˚ º ª ˆ ^ ˆ › ␣ · ⋅ ” ˝ Ω » © √ ∫ ¬ µ Å ß ∆ ƒ ˙ ˇ ¯ ‚ ’ ˛ Œ Æ ® ™ ¥ ‡ ˚ Ø ∏
function! MyIndetation()
  set list listchars=tab:┆⋅,eol:↲,trail:·,extends:⟩,precedes:⟨
endfunction
call MyIndetation()
set showbreak=↪\ 
map <leader>i :call  MyIndetation()<CR>
map <leader>I :set nolist<CR>

" ==============My Mappings==============
let mapleader = '\'
map <leader>r :source ~/.vimrc<CR>
map <leader>w <C-w><C-w>
map <leader>pm :set paste<CR>
map <leader>Pm :set nopaste<CR>
"paste to next line
map <leader>po :pu
"paste to previus line
map <leader>pO :pu!
"list all mapings
noremap <leader>? :map<CR>
noremap <leader>p "+p
noremap <leader>P "+P
noremap <leader>y "+y
noremap <leader>Y "+Y
" turn off search highligh
nnoremap <leader><space> :nohlsearch<CR>
map <leader>s :echo '<leader>se En; <leader>sp Pt; in vm use z=; next ]s; prev [s; add zg; addS zG; wrong zw; wrongS sW;'<CR>
" <C-x><C-k> for options ; in v mode z= for sugestions
map <leader>se :set spell spelllang=en_ca<CR>
map <leader>sp :set spell spelllang=pt<CR>
map <leader>sn :set nospell<CR>
map <leader>d "_d |"the black hole register
map <leader>D "_D |"the black hole register
" desable shift k 
" map <S-k> <Nop>
" desable shift j and pass beavior to <C-j>
" map <S-j> <Nop>
" map <C-j> :join<CR>
" map <C-J> :join!<CR>
" scroll the viewport faster
nnoremap <C-k> 3k
nnoremap <C-j> 3j
inoremap <C-k> <Up>
inoremap <C-j> <Down>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
inoremap ‘ <BS>
inoremap ˇ <Del>
nmap <leader><leader> :w<cr>    " shortcut to save
" map <leader>ig :set list listchars=tab:\→\ ,eol:¬,trail:⋅,extends:❯,precedes:❮<CR>

" ========== move lines up and down==========
" " <alt-k> ¯ ==>
" nmap ¯ :m+<CR>
" " <alt-j> „ ==>
" nmap „ :m-2<CR>
" vmap ¯ :m'>+<CR>`<my`>mzgv`yo`z
" vmap „ :m'<-2<CR>`>my`<mzgv`yo`z
" nnoremap ¯ :m .+1<CR>==
" nnoremap „ :m .-2<CR>==
inoremap ¯ <Esc>:m .+1<CR>==gi
inoremap „ <Esc>:m .-2<CR>==gi
vnoremap ¯ :m '>+1<CR>gv=gv
vnoremap „ :m '<-2<CR>gv=gv

nnoremap ¯ 0Vdp0 
nnoremap „ 0Vdkkp0

" ==========Folding setup==========
function! FoldindToggle()
  if &foldenable ==# "nofoldenable"
    set foldenable
    set foldcolumn=4 
    set foldminlines=3
    set foldmethod=indent
    " hi FoldColumn ctermfg=Black
    hi FoldColumn ctermbg=239 ctermfg=244
  else
    set nofoldenable
    set foldcolumn=0 
    set foldmethod=indent
  endif
endfunction
map <leader>f :call FoldindToggle()<CR>
command! SetFoldindToggle call FoldindToggle()
SetFoldindToggle

" ========= My Help File =========
command! HelpMe :vs ~/.vimhelp

" ========= Relative Numbering =========
if v:version >= 703
  function! NumberToggle()
    if(&relativenumber == 1)
      set norelativenumber
    else
      set number
      set relativenumber
    endif
  endfunc
  call NumberToggle()
  nnoremap <leader>nr :call NumberToggle()<CR>
endif
"============ Backspace ============
set backspace=2 " make backspace work like most other apps
set backspace=indent,eol,start

" ========== disable auto comment ==========
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
set formatoptions-=cro

" ========== Crontab ==========
" compatibility workaround for using Vim 
autocmd filetype crontab setlocal nobackup nowritebackup

" ========== Command Alaias ======
" Generic function to create alias on comand mode case INSENSETIVE
" Basi exemple
" cnoreabbrev W w
fun! SetupCommandAlias(from, to)
    exec 'cnoreabbrev <expr> '.a:from
                \ .' ((getcmdtype() is# ":" && getcmdline() is# "'.a:from.'")'
                \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfun
call SetupCommandAlias("W","w")

" ======= Colse Bufer solution =======

" Delete buffer while keeping window layout (don't close buffer's windows).
" Version 2008-11-18 from http://vim.wikia.com/wiki/VimTip165
if v:version < 700 || exists('loaded_bclose') || &cp
finish
endif
let loaded_bclose = 1
if !exists('bclose_multiple')
let bclose_multiple = 1
endif

" Display an error message.
function! s:Warn(msg)
echohl ErrorMsg
echomsg a:msg
echohl NONE
endfunction

" Command ':Bclose' executes ':bd' to delete buffer in current window.
" The window will show the alternate buffer (Ctrl-^) if it exists,
" or the previous buffer (:bp), or a blank buffer if no previous.
" Command ':Bclose!' is the same, but executes ':bd!' (discard changes).
" An optional argument can specify which buffer to close (name or number).
function! s:Bclose(bang, buffer)
if empty(a:buffer)
let btarget = bufnr('%')
elseif a:buffer =~ '^\d\+$'
let btarget = bufnr(str2nr(a:buffer))
else
let btarget = bufnr(a:buffer)
endif
if btarget < 0
call s:Warn('No matching buffer for '.a:buffer)
return
endif
if empty(a:bang) && getbufvar(btarget, '&modified')
call s:Warn('No write since last change for buffer '.btarget.' (use :Bclose!)')
return
endif
" Numbers of windows that view target buffer which we will delete.
let wnums = filter(range(1, winnr('$')), 'winbufnr(v:val) == btarget')
if !g:bclose_multiple && len(wnums) > 1
call s:Warn('Buffer is in multiple windows (use ":let bclose_multiple=1")')
return
endif
let wcurrent = winnr()
for w in wnums
execute w.'wincmd w'
let prevbuf = bufnr('#')
if prevbuf > 0 && buflisted(prevbuf) && prevbuf != w
buffer #
else
bprevious
endif
if btarget == bufnr('%')
" Numbers of listed buffers which are not the target to be deleted.
let blisted = filter(range(1, bufnr('$')), 'buflisted(v:val) && v:val != btarget')
" Listed, not target, and not displayed.
let bhidden = filter(copy(blisted), 'bufwinnr(v:val) < 0')
" Take the first buffer, if any (could be more intelligent).
let bjump = (bhidden + blisted + [-1])[0]
if bjump > 0
execute 'buffer '.bjump
else
execute 'enew'.a:bang
endif
endif
endfor
execute 'bdelete'.a:bang.' '.btarget
execute wcurrent.'wincmd w'
endfunction
command! -bang -complete=buffer -nargs=? Bclose call <SID>Bclose('<bang>', '<args>')
nnoremap <silent> <Leader>bd :Bclose<CR>
nnoremap <silent> <Leader>bD :Bclose!<CR>

" ========To be improved============
" ========== Test Area ==========

" to call a function 
" :call
function! MyTab(texto)
  echo a:texto
endfunction
"map <leader>T=MyTab()<CR>

function! MyTab1()
  echo "texto"
endfunction
map <leader>-:call  MyTab1()


" let my_sw = 200
" if my_sw == 20
"   echo my_sw
" elseif my_sw > 30
"   echo "is bigg"
" endif


" "==========Mac test==========
function! OsType()
    if has("mac") || has("macunix")
      echo "mac"
    " nmap <D-j> <M-j>
    " nmap <D-k> <M-k>
    " vmap <D-j> <M-j>
    " vmap <D-k> <M-k>
    elseif has ("Linux")
      echo "Linux"
    endif
endfunction

" if has("unix")
"     let s:uname = system("uname")
"     if s:uname == "Darwin\n"
"         echo "mac from if"
"     endif
" endif


" " ====== Tabular func ===========
" inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
" 
" function! s:align()
"   let p = '^\s*|\s.*\s|\s*$'
"   if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
"     let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
"     let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
"     Tabularize/|/l1
"     normal! 0
"     call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
"   endif
" endfunction



" ============Plug config=================
" ========================================

if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
		\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'terryma/vim-multiple-cursors' 					"Ctrl-n, Ctrl-p, Ctrl-x, MultipleCursorsFind
Plug 'kien/ctrlp.vim' 									"fuzzy find files
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }	"file drawer, open with :NERDTreeToggle
Plug 'benmills/vimux'
Plug 'godlygeek/tabular'								|": Tab /'char to alin' |":'<,'>Tab /:\zs
Plug 'othree/eregex.vim' 								" :%S/ for substitute with perl regex
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround' 								" in vm S' ; in nm ysiw' or cs"=
Plug 'bronson/vim-crosshairs'							" coursorline upgrade
Plug 'Yggdroot/indentLine'								" <Leader>il fancy indent guides with spaces only
" Plug 'nathanaelkane/vim-indent-guides'				" <Leader>ig
" Plug 'vim-scripts/LanguageTool' 						" not working
" Plug 'rhysd/vim-grammarous'							" not working 
" Plug 'scrooloose/syntastic' 							" semantic analyzer 
" Plug 'octol/vim-cpp-enhanced-highlight'
" =========== Color Plugs ===============
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'flazz/vim-colorschemes'
" Plug 'w0ng/vim-hybrid'
" Plug 'altercation/vim-colors-solarized'
" Plug 'sickill/vim-monokai'
" ============= Auto compleat ===========
if !has('nvim')
	Plug 'Valloric/YouCompleteMe'	, { 'do': './install.py --clang-completer' }
else
	Plug 'Shougo/deoplete.nvim'		, { 'do': ':UpdateRemotePlugins' }
endif
" Plug 'Shougo/neocomplete'
" Plug 'ervandew/supertab'
" ========= SnipMate (grabas) ===========
" Plug 'MarcWeber/vim-addon-mw-utils'
" Plug 'tomtom/tlib_vim'
" Plug 'garbas/vim-snipmate'
" == UtilSnips ==
Plug 'SirVer/ultisnips'
" Optional
Plug 'honza/vim-snippets'
" ========================================
call plug#end()
" let g:plug_timeout 300
" ========================================
" ============ Plug END ==================
" ========================================

" =============My vim options===========
set nocompatible                   " be iMproved, required
filetype indent plugin on
syntax on
set ai                             " auto indent
set hlsearch                       " high light search
set incsearch                      " search as characters are entered
set number                         " number the lines
set t_Co=256                       " set colour to 256
set wildmenu                       " show matching possibilities in : prompt
set tabstop=4                      " tap size
set shiftwidth=4                   " 1 tab == 4 spaces
set tabstop=4                      " 1 tab == 4 spaces
set smarttab                       " Be smart when using tabs
set scrolloff=5                    " when scrolling all ways show 5 lines
set cursorline                     " enable the horizontal line
" set cursorcolumn                 " enable the vertical line
set hidden                         " change buffer without saving
set wrap                           " this enables visual  wrapping
set textwidth=0 wrapmargin=0       " this turns off physical line wrapping
set autoread                       " detect when a file is changed
set timeoutlen=1000 ttimeoutlen=10 " time delay for key combinations and changing modes
set esckeys                        " deables all <esc> conbinations
"Very magic
"nnoremap / /\v
"vnoremap / /\v
"noremap / /\v
"cnoremap %s/ %s/\v

" ======= Colors and Thems ==========
" --hybrid--
"let g:hybrid_custom_term_colors = 1
"let g:hybrid_reduced_contrast = 1
"colorscheme hybrid 
" --solarized--
"set background=dark
"let g:solarized_visibility = "high"
"let g:solarized_contrast = "high"
"let g:solarized_termcolors = 256
"colorscheme solarized
" --monokai--
colorscheme Monokai
" toggle invisible characters
" § ¦ ┆  │ • ¶ ÷ → ← ▶ ◀ ❮ ❯ ⟨ ⟩ ★ ♦ ◥  ¬ ↲ ↪ ↳ ≈ ¿ ◊ ˚ º ª ˆ ^ ˆ › ␣ · ⋅ ” ˝ Ω » © √ ∫ ¬ µ Å ß ∆ ƒ ˙ ˇ ¯ ‚ ’ ˛ Œ Æ ® ™ ¥ ‡ ˚ Ø ∏
" tab:▸\
" tab:»·

if g:colors_name == 'Monokai'
	highlight SpecialKey ctermfg=59 ctermbg=235 cterm=NONE guifg=#49483e guibg=#3c3d37 gui=NONE
	"The NonText highlighting will be used for eol, extends and precedes.
	"SpecialKey for nbsp, space, tab and trail. hl-NonText hl-SpecialKey
	":highlight SpecialKey ctermfg=59 ctermbg=237 cterm=NONE guifg=#49483e guibg=#3c3d37 gui=NONE
	":highlight NonText ctermfg=59 ctermbg=236 cterm=NONE guifg=#49483e guibg=#31322c gui=NONE
	":highlight Cursor ctermfg=235 ctermbg=231 cterm=NONE guifg=#272822 guibg=#f8f8f0 gui=NONE
	":highlight Visual ctermfg=NONE ctermbg=59 cterm=NONE guifg=NONE guibg=#49483e gui=NONE
	":highlight CursorLine ctermfg=NONE ctermbg=237 cterm=NONE guifg=NONE guibg=#3c3d37 gui=NONE
	":highlight CursorColumn ctermfg=NONE ctermbg=237 cterm=NONE guifg=NONE guibg=#3c3d37 gui=NONE
endif

function! MyIndetation()
	set list listchars=tab:┆⋅,eol:↲,trail:·,extends:⟩,precedes:⟨
      echo 
endfunction
call MyIndetation()
set showbreak=↪\ 
map <leader>i :call  MyIndetation()<CR>
map <leader>I :set nolist<CR>
" ==========My Mappings==============
" To check if a maping exist try e.g. :verbose map \r
map <C-e> :NERDTreeToggle<CR>
let mapleader = '\'
map <leader>r :source ~/.vimrc<CR>
map <leader>n :bnext<CR>
map <leader>pm :set paste<CR>
map <leader>P :set nopaste<CR>
" turn off search highligh
nnoremap <leader><space> :nohlsearch<CR>
map <leader>s :echo 'Please use <leader>se for English our <leader>sp for Portuguese'<CR>
" <C-x><C-k> for options ; in v mode z= for sugestions
map <leader>se :set spell spelllang=en_ca<CR>
map <leader>sp :set spell spelllang=pt<CR>
map <leader>S :set nospell<CR>
" desable shift k
map <S-k> <Nop>
" desable shift j
map <S-j> <Nop>
noremap <leader>pp "+p
noremap <leader>y "+y
" scroll the viewport faster
nnoremap <C-k> 3k
nnoremap <C-j> 3j
nmap <leader><leader> :w<cr> " shortcut to save
map <leader>b "_
" map <leader>ig :set list listchars=tab:\→\ ,eol:¬,trail:⋅,extends:❯,precedes:❮<CR>
"============ Backspace ============
set backspace=2 " make backspace work like most other apps
set backspace=indent,eol,start

" ========== disable auto comment ==========
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
set formatoptions-=cro

" ========== Crontab ==========
"	compatibility workaround for using Vim 
autocmd filetype crontab setlocal nobackup nowritebackup

	
" =================================
" =================================
" ======= Plugs Settings  =========
" =================================
" =================================
" ==========vim-cpp-enhanced-highlight==========
" let c_no_curly_error=1
" let g:cpp_class_scope_highlight = 1
" let g:cpp_experimental_template_highlight = 1

" ========== eregex ==========
nnoremap <leader>/ :call eregex#toggle()<CR>
let g:eregex_default_enable = 0
let g:eregex_forward_delim = '/'
let g:eregex_backward_delim = '?'
" let g:eregex_force_case = 1

" ============= AirLine =============
set laststatus=2 "to vim airline apear
let g:airline#extensions#tabline#enabled = 1		"enable the list of buffers
let g:airline#extensions#tabline#fnamemod = ':t'	"show just the file name
"AirlineTheme murmur

" ========== syntastic ==========
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" ========== NERDTree automatically ==========
autocmd StdinReadPre * let s:std_in=5
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif   " incompatible YCM
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ========== YCM ==========
if !has('nvim')
	let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
	let g:ycm_confirm_extra_conf = 0
"let g:ycm_key_list_select_completion = [] "YCM snippet compatibility, disable tab
"Make YCM compatible with UltiSnips (using supertab)
" let g:ycm_key_list_previous_completion = [ '<C-k>', '<Up>']
" let g:ycm_key_list_select_completion = [ '<C-j>', '<Down>']
else
" ========== deoplete ==========
	let g:deoplete#enable_at_startup = 1
" disable autocomplete
" let g:deoplete#disable_auto_complete = 1
	if has("gui_running")
		inoremap <silent><expr><C-k> deoplete#mappings#manual_complete()
	else
		inoremap <silent><expr><C-k> deoplete#mappings#manual_complete()
	endif
endif

" ======= UltilSnips/YCM key binding ========
let g:ycm_key_list_select_completion=["<tab>"]
let g:ycm_key_list_previous_completion=["<S-tab>"]
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-tab>"
let g:UltiSnipsExpandTrigger="<nop>"
let g:ulti_expand_or_jump_res = 0
function! <SID>ExpandSnippetOrReturn()
	let snippet = UltiSnips#ExpandSnippetOrJump()
	if g:ulti_expand_or_jump_res > 0
		return snippet
	else
		return "\<CR>"
	endif
endfunction
inoremap <expr> <CR> pumvisible() ? "<C-R>=<SID>ExpandSnippetOrReturn()<CR>" : "\<CR>"

" ========== Nerd Commenter ==========
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" ========To be improved============
" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
nmap <S-j> :m+<CR>
nmap <S-k> :m-2<CR>
vmap <S-j> :m'>+<CR>`<my`>mzgv`yo`z
vmap <S-k> :m'<-2<CR>`>my`<mzgv`yo`z

" ==========Mac test==========
function! Mac_teste()
	if has("mac") || has("macunix")
	echo "mac"
   " nmap <D-j> <M-j>
   " nmap <D-k> <M-k>
   " vmap <D-j> <M-j>
   " vmap <D-k> <M-k>
	endif
endfunction
" ========== Test Area ==========
vmap <leader>t :Tab /
vmap <leader>T :Tab /\zs
": Tab /'char to alin' 
":'<,'>Tab /:\zs

function! MyTab(texto)
	echo a:texto
endfunction
"map <leader>T=MyTab()<CR>

function! MyTab1()
	echo "texto"
endfunction
map <leader>-:call  MyTab1()
" " ====== Tabular func ===========
" inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
" 
" function! s:align()
"   let p = '^\s*|\s.*\s|\s*$'
"   if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
"     let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
"     let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
"     Tabularize/|/l1
"     normal! 0
"     call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
"   endif
" endfunction
" 

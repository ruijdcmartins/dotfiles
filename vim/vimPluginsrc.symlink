" =================================
" =================================
" ======= Plugs Settings  =========
" =================================
" =================================

" ==========vim-cpp-enhanced-highlight==========
" let c_no_curly_error=1
" let g:cpp_class_scope_highlight = 1
" let g:cpp_experimental_template_highlight = 1

" ========== eregex ==========
if exists("eregex")
  "echo "eregex"
  nnoremap <leader>/ :call eregex#toggle()<CR>
  let g:eregex_default_enable = 0
  let g:eregex_forward_delim = '/'
  let g:eregex_backward_delim = '?'
  " let g:eregex_force_case = 1
endif
" ============= AirLine =============
if exists("AirLine")
  "echo "AirLine"
  set laststatus=2 "to vim airline apear
  let g:airline#extensions#tabline#enabled = 1          "enable the list of buffers
  let g:airline#extensions#tabline#buffer_idx_mode = 1  "show bufer number
  let g:airline#extensions#tabline#fnamemod = ':t'      "show just the file name
endif
" ========== syntastic ==========
if exists("syntastic")
  "echo "syntastic"
  " set statusline+=%#warningmsg#
  " set statusline+=%{SyntasticStatuslineFlag()}
  " set statusline+=%*
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
endif
" ========== NERDTree ==========
if exists(":NERDTree")
  "echo "NerdTree"
  map <C-e> :NERDTreeToggle<CR>
  "exit if NERDTree is the only buffer
  "autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  "autocmd StdinReadPre * let s:std_in=5
  "autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif   " incompatible YCM
endif

" ========== YCM & deoplete =========
if exists("Ycm")
  "echo "Ycm"
  let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
  let g:ycm_confirm_extra_conf = 0
  "New testing
  let g:ycm_complete_in_comments = 1
  let g:ycm_collect_identifiers_from_comments_and_strings = 1
  let g:ycm_seed_identifiers_with_syntax = 1
endif
" ======= UltilSnips/YCM key binding ========
if exists("UltiSnips")
  "========= 1 =========
  if UltiSnips == 1
  "echo "Ulti 1"
    " make YCM compatible with UltiSnips (using supertab)
    "let g:ycm_key_list_select_completion = ['<C-j>', '<C-n>', '<Down>']
    "let g:ycm_key_list_previous_completion = ['<C-k>', '<C-p>', '<Up>']
    "let g:SuperTabDefaultCompletionType = '<C-n>'
    let g:ycm_key_list_select_completion = ['<C-j>', '<Down>']
    let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
    let g:SuperTabDefaultCompletionType = '<C-j>'

    " better key bindings for UltiSnipsExpandTrigger
    let g:UltiSnipsExpandTrigger = "<tab>"
    let g:UltiSnipsJumpForwardTrigger = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
  endif
endif
" ========== Nerd Commenter ==========
if exists("nerdcommenterCheck")
  "echo "nerdcommenterCheck"
  " Add spaces after comment delimiters by default
  let g:NERDSpaceDelims = 1
  " Use compact syntax for prettified multi-line comments
  let g:NERDCompactSexyComs = 1
  " Align line-wise comment delimiters flush left instead of following code indentation
  let g:NERDDefaultAlign = 'left'
  " Set a language to use its alternate delimiters by default
  let g:NERDAltDelims_java = 1
  " Add your own custom formats or override the defaults
  let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
  " Allow commenting and inverting empty lines (useful when commenting a region)
  let g:NERDCommentEmptyLines = 1
  " Enable trimming of trailing whitespace when uncommenting
  let g:NERDTrimTrailingWhitespace = 1
endif

" ============== PyMode ================
if exists("pyMode")
  "echo "pyMode"
  ":help pymode
  " Override go-to.definition key shortcut to Ctrl-]
  let g:pymode_rope_goto_definition_bind = "<C-]>"
  " Override run current python file key shortcut to Ctrl-Shift-e
  "let g:pymode_run_bind = "<C-S-e>"
  let g:pymode_run_bind = '<leader>R'
  " Override view python doc key shortcut to Ctrl-Shift-d
  let g:pymode_doc_bind = "<C-S-d>"
  " enable / desable folding
  let g:pymode_folding = 0
endif
